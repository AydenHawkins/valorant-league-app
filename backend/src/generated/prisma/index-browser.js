
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AgentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MapScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeagueScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeasonScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tag: 'tag',
  puuid: 'puuid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeriesScalarFieldEnum = {
  id: 'id',
  seasonId: 'seasonId',
  redTeamId: 'redTeamId',
  blueTeamId: 'blueTeamId',
  bestOf: 'bestOf',
  winnerTeamId: 'winnerTeamId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  seriesId: 'seriesId',
  matchNumber: 'matchNumber',
  riotMatchId: 'riotMatchId',
  mapId: 'mapId',
  gameLengthMs: 'gameLengthMs',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  isCompleted: 'isCompleted',
  status: 'status',
  winnerTeamSide: 'winnerTeamSide',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchParticipationScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  playerId: 'playerId',
  teamId: 'teamId',
  teamSide: 'teamSide',
  agentId: 'agentId',
  createdAt: 'createdAt'
};

exports.Prisma.MatchPlayerStatsScalarFieldEnum = {
  id: 'id',
  matchParticipationId: 'matchParticipationId',
  matchId: 'matchId',
  playerId: 'playerId',
  agentId: 'agentId',
  agentName: 'agentName',
  score: 'score',
  kills: 'kills',
  deaths: 'deaths',
  assists: 'assists',
  headshots: 'headshots',
  bodyshots: 'bodyshots',
  legshots: 'legshots',
  damageDealt: 'damageDealt',
  damageReceived: 'damageReceived',
  adr: 'adr',
  acs: 'acs',
  kd: 'kd',
  hsPercent: 'hsPercent',
  kast: 'kast',
  firstKills: 'firstKills',
  firstDeaths: 'firstDeaths',
  grenadeCasts: 'grenadeCasts',
  ability1Casts: 'ability1Casts',
  ability2Casts: 'ability2Casts',
  ultimateCasts: 'ultimateCasts',
  spentOverall: 'spentOverall',
  spentAverage: 'spentAverage',
  loadoutOverall: 'loadoutOverall',
  loadoutAverage: 'loadoutAverage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchTeamStatsScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  teamId: 'teamId',
  teamSide: 'teamSide',
  roundsWon: 'roundsWon',
  roundsLost: 'roundsLost',
  won: 'won',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoundScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  roundNumber: 'roundNumber',
  result: 'result',
  ceremony: 'ceremony',
  winningTeam: 'winningTeam',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlantScalarFieldEnum = {
  id: 'id',
  roundId: 'roundId',
  playerId: 'playerId',
  roundTimeMs: 'roundTimeMs',
  site: 'site',
  locationX: 'locationX',
  locationY: 'locationY'
};

exports.Prisma.DefuseScalarFieldEnum = {
  id: 'id',
  roundId: 'roundId',
  playerId: 'playerId',
  roundTimeMs: 'roundTimeMs',
  locationX: 'locationX',
  locationY: 'locationY'
};

exports.Prisma.RoundPlayerStatsScalarFieldEnum = {
  id: 'id',
  roundId: 'roundId',
  matchParticipationId: 'matchParticipationId',
  playerId: 'playerId',
  score: 'score',
  kills: 'kills',
  headshots: 'headshots',
  bodyshots: 'bodyshots',
  legshots: 'legshots',
  grenadeCasts: 'grenadeCasts',
  ability1Casts: 'ability1Casts',
  ability2Casts: 'ability2Casts',
  ultimateCasts: 'ultimateCasts',
  loadoutValue: 'loadoutValue',
  creditsRemaining: 'creditsRemaining',
  weaponId: 'weaponId',
  weaponName: 'weaponName',
  armorId: 'armorId',
  armorName: 'armorName',
  createdAt: 'createdAt'
};

exports.Prisma.RoundTeamStatsScalarFieldEnum = {
  id: 'id',
  roundId: 'roundId',
  teamId: 'teamId',
  teamSide: 'teamSide',
  won: 'won'
};

exports.Prisma.KillScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  roundNumber: 'roundNumber',
  timeInRoundMs: 'timeInRoundMs',
  timeInMatchMs: 'timeInMatchMs',
  killerId: 'killerId',
  victimId: 'victimId',
  locationX: 'locationX',
  locationY: 'locationY',
  weaponId: 'weaponId',
  weaponName: 'weaponName',
  weaponType: 'weaponType',
  secondaryFireMode: 'secondaryFireMode',
  createdAt: 'createdAt'
};

exports.Prisma.TeamRosterScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  playerId: 'playerId',
  seasonId: 'seasonId',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubstitutionScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  teamId: 'teamId',
  substitutedInId: 'substitutedInId',
  substitutedOutId: 'substitutedOutId',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Agent: 'Agent',
  Map: 'Map',
  League: 'League',
  Season: 'Season',
  Team: 'Team',
  Player: 'Player',
  Series: 'Series',
  Match: 'Match',
  MatchParticipation: 'MatchParticipation',
  MatchPlayerStats: 'MatchPlayerStats',
  MatchTeamStats: 'MatchTeamStats',
  Round: 'Round',
  Plant: 'Plant',
  Defuse: 'Defuse',
  RoundPlayerStats: 'RoundPlayerStats',
  RoundTeamStats: 'RoundTeamStats',
  Kill: 'Kill',
  TeamRoster: 'TeamRoster',
  Substitution: 'Substitution'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
